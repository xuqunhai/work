为什么要引入super这个关键字。
super是伴随着class语法出现的。在class之前，原型继承是JavaScript唯一的方式来实现对象系统的继承特性。
function Person () {}
function Student () {}
Student.prototype = new Person();
导致子类Student实例拥有一个错误的constructor属性:
var xiaoming = new Student();
xiaoming.constructor === Person; // true;
所以需要手动的维护constructor
Student.prototype = new Person();
Student.prototype.constructor = Student
但这样一来就切断了原型与父类的关系，无法有效的调用父类方法。
比如说，student原型的say方法重写person原型的say方法：
Student.prototype.say = function (options) {
    const thisClass = this.constructor;
    const parentClass = thisClass.prototype.constructor;
    ... // 做一些参数合并
    parentClass.prototype.say(newOptions);
    ... // 记录某些结果
}
一旦加上Student.prototype.constructor = Student这一句，上面调用父类方法就会失效。因为thisClass和parentClass一样都是指向Student。
super就是为了解决这件事才被创造出来的。


SUPER的指向
第一种情况，super作为函数调用时，表示父类的构造函数。
第二种情况，super作为对象时，在普通方法中，指向父类的原型对象；在静态方法中，指向父类

语义1：在类的constructor中，super指向父类的构造器，而this则是指向new创建的实例。
super = Person.bind(this);
语义2：在语法super.xxx中，super指向父类原型，在构造过程中this指向创建的实例
super.toString = Person.prototype.toString.bind(this);
语义3：在静态类方法中使用语法super.xxx，其super指向父类，this指向调用当前方法的类
super.getId = Person.getId.bind(this)
语义4： 在方法声明中使用super.xxx，super指向对象xiaoming的原型，this指向调用该方法时的this对象。
super.toString = Object.getPrototypeOf(xiaoming).toString.bind(this)
语义5：不能引用super（下一节解释）


super到底是怎么运行的呢？在第一部分介绍到，即要维护好constroctor还要能调用父类的方法，这似乎是不可能的事。
为了提供解决方法，JavaScript为函数添加了一个特殊的内部属性：[[HomeObject]]。
当一个函数被定义为类或者对象方法时，它的[[HomeObject]]属性就成为了该对象，然后super使用它来解析父类原型及其方法。
[[HomeObject]]内部槽使方法记住了它们的对象，而且该内部槽不能被更改，这个绑定是永久的。值得注意的是，该内部槽仅被用于super。
[[HomeObject]]是为类和普通对象中的方法定义的。但对于对象而言，方法必须是method(){}的形式，而不是method: function ()。

MethodDefinition的语法概念，它是介绍方法定义的规则。显然sayName () {}是一种MethodDefinition的语法，sayAge: function() {}则不是。
再往下了解会发现，MethodDefinition语法会调用MakeMethod。
第3条可以发现，设置了[[HomeObject]]。所以方法必须是method(){}的形式。


