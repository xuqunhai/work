web安全/白帽子讲web安全


################## web安全 ####################


CSP内容安全策略content security policy
指定哪些内容可以执行：设置http头

内置函数转义（html和css转义5个 & > < “ ‘）(js转义3个 \ “ ‘)
str.replace(/\\/g, ‘\\\\’)
str.replace(/“/g, ‘\\”’)
str.replace(/‘/g, “\\’”)
DOM解析黑名单
/<\s*\/?script\s*>/g
/javascript:[^’”]*/g
/onerror\s*=\s*[‘”]?[^’”]*[‘”]?/g
DOM解析白名单 - 第三方库
CSP

有些浏览器可能默认会阻止xss攻击，如果想放开方便测试，可以设置http头关掉它，如header(‘X-Xss-Protection: 0’)


CSRF
登录某论坛，然后点击朋友发过来的一个链接，就有可能出现自动发了一条论坛评论，原因：
如果评论是post，那链接里构造了一个form表单，自动提交发送了一个post请求到论坛，虽然form提交会刷新页面，但是如果把form的target指向一个自己创建的隐藏的iframe，用户就看不到刷新；
如果评论支持get，甚至可能出现网络蠕虫（短时间扩展多个人），如通过浏览器访问自己写的页面，页面里通过img发送了评论，而且评论内容是一个链接，叫‘点击这里有钱拿哟’，然后它又跳转到我写的页面，我的页面又自动重复发，别人看到‘点击这里有钱拿哟’点击的话又会自动发评论，久而久之就会出现一大批人都发一条叫‘点击这里有钱拿哟’的评论；

特点是访问论坛后台时并不经过论坛前端，但是会带上前端获取到的cookie，所以解决办法之一就是对cookie增加samesite属性设置，不允许不同网站携带cookie请求论坛后台；效果很好；不过这个有点兼容性问题；

另一个角度，必须让它经过论坛前端，所以出现了：
前端页面加入验证码（后台验证时必须校验验证码非空，因为如果你的校验是前端发给你的和你本地存储的进行对比的话，万一攻击者根本没发送给你，而你后台数据库也不存在的话，这也会绕过验证），不过这个体验不太好，而且也不可能每个请求都要验证码；
token校验：后台往页面和cookie同时注入token，如果是表单，一般注入type为hidden的input中，如果是ajax，会注入到如head的meta里，然后前端通过js去获取meta的csrftoken，请求时带上；这样能确保必须经过前端，而且要能获取到cookie；

另一种就是判断request.headers.referer是否是规定网站来访问的，但是因为referer可以随意拼接，如果你的判断是if(referer.indexOf(‘localhost’)===-1)，但如果攻击者把referer改成后面拼上参数而且包含localhost的话就可以绕过验证，所以一般用正则判断：
/^https?\/\/localhost/.test(referer)
防盗链的话如果referer为空时允许的，所以这时候要结合业务进行取舍；




cookie
http-only能决定能否通过js设置cookie，domain限制cookie在哪些网站有效，path限制cookie在网站的哪些文件夹有效；
js读取和设置cookie都是document.cookie，而且设置的时候只能设置一条，默认第一个有效，如果有其他属性，如expires，要以分号隔开：
document.cookie=“a=111;b=222”这里只会设置aaa
document.cookie=“a=111;expires=0”





################## 白帽子讲web安全 ####################

机密性。加密
完整性  数字签名
可用性  拒绝服务攻击DoS  停车场车位被占用，无法再提供正常服务

白名单  网站只提供web服务
黑名单  不允许SSH端口对外开放

白名单  列出一个允许使用的软件及版本清单，在此清单外的软件禁止使用

处理用户提交的富文本
白名单  只允许用户输入如a、img等需要用到的标签
黑名单  禁用如script、iframe等标签，但黑名单可能会有遗漏

最小权限原则  只授予主体必要的权限，而不要过度授权

纵深防御原则  更全面、更正确看待问题
各个不同层面、不同方面实施安全方案
利用web应用漏洞，攻击者先获得低权限的webshell，然后通过低权限的webshell上传更多的文件，并尝试执行更高权限的系统命令，尝试在服务器上提升权限为root；接下来攻击者再进一步尝试渗透内网，比如数据库服务器所在的网段
就入侵的防御来说，在web应用安全、OS系统安全、数据库安全、网络环境安全等层面设计安全方案，组成整个防御体系

解决根本问题的地方实施针对性安全方案
过滤输入中的特殊符号
区分富文本和非富文本，encode非富文本

数据与代码分离原则
程序在堆或栈中，将用户数据当作代码执行，混淆了代码与数据边界，导致安全问题发生
XSS
当用户输入<script src="http://evil"></script>时，用户数据就会被注入到代码片段中，浏览器将用户数据里的script标签当作代码来解析——这显然不是程序开发者的本意
对用户数据片段进行处理，可以使用过滤、编码等手段，把可能造成代码混淆的用户数据清理掉
SQL Injection
CRLF Injection


不可预测性原则
实现需要加密算法、随机数算法、哈希算法
内容管理系统的文章序号
内容管理系统的文章序号  攻击者想要批量删除这些文章，写个for循环脚本就可以很方便达到目的
攻击者想要批量删除这些文章，写个for循环脚本就可以很方便达到目的   攻击者只能通过爬虫把所有页面id抓取下来，再一一进行分析，从而提高了攻击门槛




浏览器安全
同源策略   DOM DOM  XMLHttpRequest  Flash（crossdomain.xml文件）
限制来自不同源的document或脚本对当前document读取或设置某些属性（不让浏览器页面发生混乱）
script、img、iframe、link等标签都可以跨域加载资源(实际上是由浏览器发起一次GET请求)，而不受同源策略限制；但是对于这些资源，浏览器限制了JS权限，使其不能读写返回的内容
XMLHttpRequest可以访问来自同源对象的内容，不能跨域访问资源；否则可能导致一些敏感数据泄漏，如CSRF的token，从而导致安全问题。但是业务的发展和跨域请求的需求迫切，W3C指定了xhr跨域访问标准：需要通过目标域返回的请求头来授权是否允许跨域访问(Access-Control-Allow-Origin)；注意：这个方案的安全基础就是信息js无法控制该HTTP头，如果该信任基础被打破，此方案不再安全
IE8的CSS跨域漏洞。 也就是a.html通过@import加载b.html作为css文件后，渲染当前页面DOM，在IE的CSS Parse中，将b文件fontFamily后面内容作为样式值给a文件读取，造成跨域漏洞。

浏览器沙箱
挂马网站  浏览器多进程架构 （划分功能模块，互不影响） 渲染引擎由sandBox隔离，网页代码要与浏览器内核进程通信等都需要通过IPC channel，在其中会进行一些安全检查

恶意网址拦截。钓鱼网站（模仿知名网站的相似页面来欺骗用户）     
浏览器周期性从服务器获取一份最新的恶意网址黑名单，如果用户上网时访问的网址存在于此黑名单中，浏览器就会弹出一个警告页面
EV SSL证书  可教育用户识别真实网址在浏览器地址栏中的绿色表现，以对抗钓鱼网站































