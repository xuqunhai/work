两个方法spawn和exec，这两个方法都可以被用来开启一个子进程来执行其他的程序
当你想要子进程返回大量数据给Node时，比如说图像处理，读取二进制数据等等，你最好使用spawn方法
exec究竟是用来做什么的呢？我们可以使用它来运行程序然后返回结果的状态，而不是结果的数据
不论是 spawn 还是 exec ,这2个方法在调用的时候都有第二个参数 option ,这里我们往往忽略掉此参数
他的作用是什么?
他可以帮我们设定子进程的运行环境和执行条件
那对于我们没有指定 option 参数时,上面2个函数的调用都使用了什么样的默认参数
spawn
{ 
   cwd: undefined,
   env: process.env,
   setsid: false
 }

exec
{ 
   encoding: 'utf8',
   timeout: 0, /*子进程最长执行时间 */
   maxBuffer: 200*1024,  /*stdout和stderr的最大长度*/
   killSignal: 'SIGTERM',
   cwd: null,
   env: null
 }
https://yijiebuyi.com/blog/3ec57c3c46170789eed1aa73792d99e5.html



linux(fedora)下，我们在使用child_process模块的exec方法时经常会遇到“未找到命令”错误，如下简单示例：
上述问题解决办法
1、为exec方法的第二个可选参数对象的env属性赋值，即增加执行命令的环境变量。
首先你必须找到要执行的命令所在文件夹，我这儿的“lessc”命令位于/usr/local/node/bin文件夹下。
注意，在拼接PATH时别忘记了冒号":"，因为linux环境变量以冒号分隔。
var temp=process.env, enviroment = {}
enviroment.PATH=temp.PATH+":/usr/local/node/bin";
var option={env: enviroment}
exec('xxx.css', option, function(err, out){})
https://blog.csdn.net/hui85526532/article/details/19256011


.exec()、.execFile()、.fork()底层都是通过.spawn()实现的。
.exec()、execFile()额外提供了回调，当子进程停止的时候执行。
child_process.spawn(command[, args][, options])
child_process.exec(command[, options][, callback])
child_process.execFile(file[, args][, options][, callback])
child_process.fork(modulePath[, args][, options])

参数说明：
cwd：当前工作路径。
env：环境变量。
encoding：编码，默认是utf8。
shell：用来执行命令的shell，unix上默认是/bin/sh，windows上默认是cmd.exe。
timeout：默认是0。
killSignal：默认是SIGTERM。
uid：执行进程的uid。
gid：执行进程的gid。
maxBuffer： 标准输出、错误输出最大允许的数据量（单位为字节），如果超出的话，子进程就会被杀死。默认是200*1024（就是200k啦）
备注：

如果timeout大于0，那么，当子进程运行超过timeout毫秒，那么，就会给进程发送killSignal指定的信号（比如SIGTERM）。
如果运行没有出错，那么error为null。如果运行出错，那么，error.code就是退出代码（exist code），error.signal会被设置成终止进程的信号。（比如CTRL+C时发送的SIGINT）
风险项
传入的命令，如果是用户输入的，有可能产生类似sql注入的风险，比如
exec('ls hello.txt; rm -rf *', function(error, stdout, stderr){})

exec()与execFile()之间的区别
首先，exec() 内部调用 execFile() 来实现，而 execFile() 内部调用 spawn() 来实现。
exec() -> execFile() -> spawn()
其次，execFile() 内部默认将 options.shell 设置为false，exec() 默认不是false。
https://www.cnblogs.com/chyingp/p/node-learning-guide-child_process.html