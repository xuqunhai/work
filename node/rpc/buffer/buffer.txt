为了正确理解缓冲区，我们应该了解
二进制数据、
字符编码（character encoding）
流（stream）

什么是二进制数据？
二进制仅使用 0 和 1 表示数字。下面是二进制数的一些示例。
0, 1, 10, 101, 1011011, 1000101

二进制数中的
每个数字均被视为一个 位。
8 个位合称一个 字节。

计算机如何将字符转换为二进制数据？
“每个字符都有一个与之关联的唯一二进制数”。
这种唯一编号称为字符的 字符码。
在 Javascript 中使用 charCodeAt 函数来查找每个字符的字符码。
'a'.charCodeAt() //outputs 97
'A'.charCodeAt() //outputs 65

无论使用哪种编程语言，它们各自赋予字符的字符码都是一样的。
有两大标准用来为每个字符分配字符码：ASCII 和 Unicode。
ASCII 最多使用 7 位来表示字符，而 Unicode 最多使用 16 位。
所以 Unicode 提供了比 ASCII 更大的范围，可以表示更多的字符，进而成为了最受欢迎的标准。
但是计算机用不着一直使用 Unicode 的全部 16 位来表示字符。
例如，字符“A”可以使用至少 7 位来表示。
如果计算机用前导 0 填充二进制数，使用全部 16 位来存储“A”，就是在浪费系统资源。

计算机将字符转换为二进制数据时，需要做的唯一工作就是查找每个字符的字符点吗？
答案是否定的。
你还需要执行一个将字符转换为二进制数据的步骤。那就是字符编码。
字符编码标准决定了计算机用来表示字符的位数。
UTF-8、UTF-16 和 UTF-32 就是其中一些字符编码标准。

UTF-8 使用 8 位（一字节）的块表示字符。
它可以使用 1-4 个字节对所有 Unicode 字符进行编码。
现在，如果计算机使用 UTF-8 标准对“A”进行编码，则存储的二进制值为 01000001，带一个前导 0。

什么是流？
流是从一处移到另一处的数据的集合。
二进制数据流，它是从一个地方移动到另一个地方的二进制数据的集合。

当目标接收到不符合此限制的数据块时会发生什么呢？
目标无法丢弃它们。然而，目标可以使用一种机制来存储接收到的块，直到它们可以被处理器处理为止。
这里就引入了缓冲区的概念。

什么是缓冲区，它们要做什么？
一个缓冲区是计算机内存（通常是 RAM）中一处较小的存储空间。
在目标处理器准备好处理来自流的数据块之前，缓冲区充当后者的等待区域。
如果目标从流中接收数据的速度快于其处理数据的速度，则这些多余的数据将在缓冲区中“等待”.
如果当前可用的块数量低于处理器可接受的最小数据量，则这些数据块将在一个缓冲区中“等待”
缓冲区指的就是一处等待区域，流数据在这里等待处理器，直到后者准备好处理数据为止。

缓冲区会存储通过文件流发送的数据块，直到有足够的数据可用，然后再将其传递给程序。
此过程也称为缓冲。

Node 为什么需要缓冲区。
当你将 HTTP 请求发送到 Web 服务器时，该请求会作为 TCP 流通过网络发送，这是一个二进制数据流。
因此，你构建的所有 Node 服务器都必须处理流和缓冲区。


Node.js 中的缓冲区创建和操作
Node.js 提供了一个 Buffer 类，可让你轻松创建和操作缓冲区。
创建一个 buffer
let buffer1 = Buffer.alloc(100) // 意味着该缓冲区会存储 100 个字节的零

从字符串和整数数组创建缓冲区。
// 编码给定字符串并将其存储为二进制数据
let buffer2 = Buffer.from("I'm learning Node Buffer")
// 将每个整数存储为缓冲区
let buffer3 = Buffer.from([1, 2, 90, 55])

使用索引访问缓冲区中的每个字节。
buffer2[0] //returns 73 for ‘I’
buffer2.toString() //returns ‘I'm learning Node Buffer’

写入缓冲区。
buffer2.write("Hi")
buffer2.toString() //returns ‘Hi’