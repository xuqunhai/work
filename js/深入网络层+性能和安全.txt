当用户开始与浏览器交互时会发生以下情况:
用户在浏览器地址栏中输入一个 URL
给定 Web 上资源的 URL，浏览器首先检查其本地缓存和应用程序缓存，并尝试使用本地副本来完成请求
如果缓存不能使用，浏览器从 URL 获取域名，并从 DNS 请求服务器的 IP 地址。如果域被缓存，则不需要 DNS 查询
浏览器创建一个 HTTP 包，表示它请求位于远程服务器上的 Web 页面
数据包被发送到 TCP 层，TCP 层在 HTTP 数据包上添加自己的信息，维护已启动的会话需要此信息
然后数据包被传递给 IP 层，IP 层的主要任务是找出一种将数据包从用户发送到远程服务器的方法，这些信息也存储在包的顶部
数据包被发送到远程服务器
一远程服务器一旦接收到数据包，就会以类似的方式发回响应。


TLS 协议
整个TLS握手包括以下步骤:
客户端向服务器发送 “Client hello” 消息，与之一同发送的还有客户端产生的随机值和支持的密码套件。
服务器通过向客户端发送 “Server hello” 消息及服务器产生的随机值进行响应。
服务器将其证书发送给客户端，并可以从客户端请求类似的证书。 
服务器发送 “Server hello done” 消息。
如果服务器向客户机请求了证书，客户机将发送证书。
客户端创建一个随机的 Pre-Master Secret，并使用服务器证书中的公钥对其进行加密，将加密的 Pre-Master Secret 发送到服务器。
服务器接收 Pre-Master Secret。 服务器和客户端均基于预主密钥生成主密钥和会话密钥。
客户端向服务器发送 “Change cipher spec” 通知，以指示客户端将开始使用新的会话密钥进行散列和加密消息。 
客户端还发送 “Server finished” 消息。
服务器接收 “Change cipher spec”，并使用会话密钥将其记录层安全状态切换为对称加密。 
服务器向客户端发送 “Server finished” 消息。
客户端和服务器现在可以通过他们已建立的安全通道交换应用程序数据。 
从客户端发送到服务器并返回的所有消息都使用会话密钥加密。



同源策略（same-origin policy）
同源是指文档的来源相同，主要包括三个方面
协议
主机
载入文档的 URL 端口


资源和客户端状态缓存
最佳请求是没有重新请求。
在发送请求之前，
浏览器会自动检查其资源缓存，执行必要的验证检查，并在满足指定条件的情况下返回资源的本地副本。
如果缓存中没有可用的本地资源，则发出网络请求，并自动将响应放置在缓存中，以便在有权限的情况下进行后续访问。
这个需要我们为页面上的所有资源提供了 Cache-Control，**ETag ** 和 Last-Modified 响应头部标志。


