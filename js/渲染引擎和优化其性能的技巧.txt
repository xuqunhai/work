浏览器的主要组件包括：
用户界面
浏览器引擎
渲染引擎
网络
UI 后端
JS 解释器
数据存储


渲染引擎概述
渲染引擎的职责就是渲染，即在浏览器窗口中显示所请求的内容。

渲染引擎
Gecko — Firefox
WebKit — Safari
Blink — Chrome，Opera (版本 15 之后)


渲染的过程
解析 HTML 以构建 Dom 树 -> 构建 Render 树 -> 布局 Render 树 -> 绘制 Render 树

为了构建渲染树，浏览器大致执行以下操作:
从 DOM 树根节点开始，遍历每一个可见的节点
一些节点是完全不可见的（比如 script标签，meta标签等），这些节点会被忽略，因为他们不会影响渲染的输出
一些节点是通过 CSS 样式隐藏了，这些节点同样被忽略——例如上例中的 span 节点在 render tree 中被忽略，因为 span 样式是 display:none
对每一个可见的节点，找到合适的匹配的CSSOM规则，并且应用样式
显示可见节点（节点包括内容和被计算的样式）

渲染树的布局
创建渲染器并将其添加到树中时，它没有位置和大小，计算这些值称为布局。

绘制渲染树
遍历渲染器树并调用渲染器的 paint() 方法以在屏幕上显示内容。

优化绘图
这通常是所有任务中运行时间最长的，因此尽可能避免这种情况非常重要。 以下是我们可以做的事情：
除了变换（transform）和透明度之外，改变其他任何属性都会触发重新绘图，请谨慎使用。
如果触发了布局，那也会触发绘图，因为更改布局会导致元素的视觉效果也改变。
通过图层提升和动画编排来减少重绘区域。