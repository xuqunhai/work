es6需要babel进行转换，
可在babeljs.cn在线编写学习es6是如何转换成es5的；

let和var的不同：
// i作用域在这
for(var i=0;i<3;i++) {

}
for(let i=0;i<3;i++) {
  // i作用域在这
}

函数作用域：
因为存在变量提升，所以函数作用域在函数定义时就决定了，而函数执行时就根据定义作用域来查找变量；
this就不一样，它是执行时确定；
不过箭头函数特殊，它是定义时外层不是箭头函数的上下文决定this；
call和apply对箭头函数无效，但是可以执行不会报错；

本地转换：
@babel/core // 将es6语法转成抽象语法树
@babel/preset-env // 提供大量插件，把语法树转成es5代码
@babel/cli // 只有通过这个包才能实现通过指令指定某某文件进行转换，如npx babel a.js -o b.js，这个包安装后，会在ndoe_modules文件夹的.bin目录多出一个babel的文件，里面就是实现转换的node命令；
至于如何告诉命令行要使用什么插件，则是通过配置文件.babelrc；


var
变量声明提升、可重复定义、全局变量挂在到window；
let
没有变量提升、同一块级作用域内不能重复定义、不挂载到window；
产生临时死区、解决闭包共享变量问题；

同一块级作用域内不能重复定义，不同作用域可以：
let a=10;
{
  let a=20;
}
上面不会报错；

临时死区示例：
let a=10;
{
  console.log(a); // a is not undefined
  let a=20;
}

解决闭包共享变量问题：
for(let i=0; i<10; i++){
  setTimeout(function(){
    console.log(i); //0-9
  },0)
}

function a(x){
  let x; //这里会报错
}


...展开&收集运算符
写入arg-》收集：
function test(...arg){}; test(1,2,3)
function test(a,b,...arg){}; test(1,2,3,4)
读取arg-》展开：var arg=[1,2,3];console.log(...arg);

浅克隆
Object.assign({}, a, b);
es7可对对象进行...扩展：
const a={
  b: 1
}
const c={
  d: 2
}
const e={...a, ...c}
当对象里属性值复杂类型只有数组或对象时，即没有函数、正则、日期对象等，可使用JSON.parse(JSON.stringify(obj))进行深度克隆；

获取请求返回的部分数据：let {a,b} = res;

箭头函数
不能new，没有原型；
参数不能重复命名；
内部arguments和this由定义时外围最接近一层的非箭头函数的arguments和this决定；arguments找不到会报错，this找到最外层会找到window；箭头函数this由定义时的环境来决定；
返回对象需要特别注意，要加括号：let sum = (a,b) => ({a:a, b:b})

let sum = x => y => z => x+y+z;
sum(1)(2)(3);  // 6

当内层函数想拿到外层函数的参数时，内层函数使用箭头函数比较简便；但是如果内外层都需要拿到，那么不能使用箭头函数；

const newA1 = arr.map(ele => ele * ele);
const newA2 = arr.filter(ele => ele > 10);


es5之Object.defineProperty

value
下面3个用Object.defineProperty定义的话默认都为false：
writable -> Function.prototype不可被赋值
configurable -> 可用delete删除属性，window下的属性不能被delete删除
enumerable -> 可通过for in遍历,Object.prototype不能被枚举；

两组描述符get、set不能和value、writable共存，会报错；

var obj={
  tempValue: 'test',
  get name() {
    return this.tempValue;
  },
  set name(newV) {
    this.tempValue = newV;
  }
}

// 执行数组push操作时增加额外操作
let arr=[]
let {push}=Array.prototype;
function upData(){
  console.log('update');
}
Object.defineProperty(Array.prototype, 'push', {
  value: (function(){
    return (...arg) => {
      push.apply(arr,arg);
      upData();
    }
  })()
})
arr.push(1,2);

Object.defineProperty的缺点：对对象后面新增的属性无法检测，对数组部分操作无法检测；
解决方法：es6 Proxy&Reflect - 兼容性不好,即使转成es5后还是有很多新的属性；

Proxy方法get、set、has、deleteProperty，返回新对象；
let newData = new Proxy(data, {
  set(target,key,value,receiver){
    Reflect.set(target,key,value);
    upDate();
  },
  get(target,key,receiver){
    return Reflect.get(target,key);
  },
  has(target, key){
    // 以_开头的属性作为私有属性，不被外界访问
    return key.indexOf('_')!=-1?false:key in target;
  },
  deleteProperty(){}
})
后续对data新增属性仍然会触发set方法；


Class
es5中class还是保留字，但是es6中class已经是关键字，不能被当作变量使用；
Class需要用new，不能直接调用；而且不能枚举原型上的方法；静态属性不是在原型上；
function Plane(name){
  this.name = name || 'default';
}
Plane.prototype.fly = function(){}

function AttackPlane(name){
  Plane.call(this,name);
}
// Object.setPrototypeOf() 方法设置一个指定的对象的原型 ( 即, 内部[[Prototype]]属性）到另一个对象或  null。如果你关心性能，你应该避免设置一个对象的 [[Prototype]]。相反，你应该使用 Object.create()来创建带有你想要的[[Prototype]]的新对象。
Obejct.setPrototypeOf(AttackPlane.prototype, Plane.prototype);
AttackPlane.prototype.otner=function(){}

const oP=new Plane();
const oA=new AttackPlane('attack');

class Plane(){
  static alive(){} // 静态私有方法，也不支持静态私有属性，es7可以
  constructor(name) { // 私有属性
    this.name = name || 'default'
  }
  // name = 10;// es6没有办法添加原型私有属性，es7可以
  fly(){} // 原型方法
}

class AttackPlane extends Plane {
  constructor(){
    super() // 没有super时只会继承方法，不会继承私有和静态属性
    this.logo='raf'
  }
  dan(){}
}



Set应用场景
差集
var a1=[1,2,3]
var a2=[2,3,4]
var o1=new Set(a1)
var o2=new Set(a2)
var newA1=[...o1].filter(ele=>!o2.has(ele))
var newA2=[...o2].filter(ele=>!o1.has(ele))
[...newA1,...newA2] // [1, 4]


es6对象属性可以是变量
let name='rafer'
const obj={
  [name]: '123'
}

obj.rafer; // 123

Object.is(NaN,NaN); //true

Map原理——lesson5

Iterator外部迭代器
迭代下一个元素必须显示调用；
内部迭代器——Array.prototype.forEach
外部只需要一次初始调用；
为啥要用Iterator？
统一处理不同数据类型的遍历，
如以前遍历数组用forEach，但是forEach不能遍历对象；
而Iterator可以遍历NodeList、arguments、数组、Set、Map、字符串等（本质是因为它们原型上有Symbol.iterator属性）；
只有具备Symbol.iterator属性的东西才能使用for...of和...扩展运算符；

第七种数据类型
let os=Symbol('abc');
typeof os; // 'symbol'
特点：
唯一、对象可作为属性、具有Symbol.iterator属性；
Symbol传入对象时，会调用toString，如果没显式定义，会往原型链上查找到Object.prototype.toString方法：
let os=Symbol({name: 'rafer'}); // Symbol([object Object])
Symbol({name: 'rafer',toString: function(){return 'xuqunhai'}}); // Symbol(xuqunhai)

如何使对象能使用...扩展运算符？
往对象添加符合es6的iterator(返回一个对象，该对象包含next函数，而next函数返回一个包含value和done的对象)：
let obj = {
  0: 'a',
  1: 'b',
  length: 2,
  [Symbol.iterator]: function(){
    let curIndex = 0;
    let next = () => {
      return {
        value: this[curIndex],
        done: this.length == ++curIndex // 下一次能否继续迭代？
      }
    }
    return {
      next
    }
  }
}


function *a(){
 let val=yield 1;
 console.log(val, 'test')
}
var b=a(); // 返回一个迭代器，内部代码并不会开始执行
b.next(123) // 执行到yield立即停止，所以let val=yield 1这一句只会执行右侧yield 1，不会完成左侧的赋值操作
b.next(111) // 完成赋值操作，而且此时yield的返回值就是next传入的参数值111，即打印出：111, 'test'
























