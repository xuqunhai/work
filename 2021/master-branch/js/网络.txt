三次握手建立可靠链接，
四次挥手断开链接；

form表单也可以提交数据到后台，不过每次都会刷新整个页面，
form表单enctype属性默认编码所有数据，如果有文件上传的话必须告诉浏览器不对字符编码，即multipart/form-data;

wamp服务器里的www文件夹相当于服务器，所以一般直接把www及之前的路径替换成服务器地址即可访问；

ajax
ajax.open(method,url,true) //这里第三个参数true表示异步，false为同步
readyState：
0表示send方法未调用；
1表示send方法已调用，正发送请求；
2表示响应已返回
3表示浏览器正解析响应；
4表示解析完成；

post请求数据通过send方法传参，而且send前需要设置请求头：
xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");

浏览器缓冲机制
请求头If-None-Match
响应头etags
请求头If-Modified-Since
响应头last-modified
Cache-Control的max-age优先级要高于Expires；

有时候缓存是 200 OK (from disk cache)有时候会是 304 ? 
看运维是否移除了 Entity Tag。移除了，就总是 200 OK (from cache)。没有移除，就两者交替出现。
200 OK (from disk cache) 是浏览器没有跟服务器确认， 就是它直接用浏览器缓存。
304 是浏览器和服务器确认了一次缓存有效性，再用的缓存。
那么禁止200 OK (from disk cache) 这个缓存的方法是，ajax 请求是带上参数 cache: false

200 form memory cache内存
不访问服务器，一般已经加载过该资源且缓存在了内存当中，直接从内存中读取缓存。浏览器关闭后，数据将不存在（资源被释放掉了），再次打开相同的页面时，不会出现from memory cache。一般脚本、字体、图片会存在内存当中,脚本可能会随时执行，如果把脚本存在磁盘中，在执行时会把该脚本从磁盘中提取到缓存中来，这样的IO开销比较大，有可能会导致浏览器失去响应。
200 from disk cache硬盘
不访问服务器，已经在之前的某个时间加载过该资源，直接从硬盘中读取缓存，关闭浏览器后，数据依然存在，此资源不会随着该页面的关闭而释放掉下次打开仍然会是from disk cache。一般非脚本会存在内存当中，如css等,因为css样式加载一次即可渲染出页面。

请求头referer作用：统计用户从哪里跳转过来的；

域名解析
https://www.baidu.com
从本地host文件查询，没有的话从DNS根服务器开始查找，
com顶级域名
baidu.com二级域名
luntan.baidu.com三级域名

跨域
1、服务器代理中转
2、jsonp
3、document.domain(前提基础域名相同，如www.baidu.com和zhidao.baidu.com)
4、Access-control-allow-origin
5、iframe

script标签使用src后相当于把src引用的文件的内容放到标签内部，然后再执行；

jsonp
原生jsonp只能是get，不过jquery的jsonp请求可以为post；
url?cb=xxx
参数名cb是和后端商量确定的，xx是前面已经定义好的js函数，用于接收后台数据后执行回调；

cookie
document.cookie='key=val;key2=val2'
Domain域
Path当前所在文件夹
Expires/Max-Age为Session表示临时会话cookie；

iframe
iframeId.contentWindow - 这里要判断iframe加载完成
  非ie使用iframeId.onload=fn;
  ie使用onreadystatechange事件
window.parent
window.top



