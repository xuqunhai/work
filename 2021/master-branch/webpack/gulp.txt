var folder={
  src: 'src/',
  dist: 'dist/'
}
gulp.task('js',function(){ // 写任务
  // 读取指定src目录，然后继续执行，将读取到的东西写入指定目录
  gulp.src(folder.src+'js/*').pipe(gulp.dest(folder.dist+'js/'))
})
// 默认会执行default任务，因为default任务依赖于js任务，所以会执行js任务
gulp.task('default',['js'])

gulp中压缩html：
1、下载插件-npm install gulp-htmlclean -D
2、取到插件var htmlClean = require('gulp-htmlclean')
3、应用插件
gulp.html('html',function(){
  gulp.src(folder.src+'html/*')
    .pipe(connect.reload()) // 监听改变自动刷新的配置之一
    .pipe(htmlClean())
    .pipe(gulp.dest(folder.dist+'html/'))
})

其他插件：
图片压缩gulp-imagemin
js压缩gulp-uglify
去掉js调试语句gulp-strip-debug
less转换gulp-less
css压缩gulp-clean-css
css3属性自动添加前缀gulp-postcss autoprefixer (.pipe(postCss([autoprefixer()])))
开启服务器gulp-connect
gulp.task('server', function(){
   connect.server({
     port: '8888',
     livereload: true // 自动刷新时的配置之一
    })
})
gulp.task('watch',function(){
  // 监听html文件变化
  gulp.watch(folder.src+'html/*', ['html'])
})


设置环境变量
在命令行输入export NODE_ENV=development
判断当前环境
var devMod=process.env.NODE_ENV == 'development'
gulp.task('html',function(){
  var page=gulp.src(folder.src+'html/*')
    .pipe(connect.reload());
  if(!devMod){
    page.pipe(htmlClean())
  }
  page.pipe(gulp.dest(folder.dist+'html/'))
})






