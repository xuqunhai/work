构建工具选型：
1、团队技术栈；
2、项目需求；
3、生态圈是否完善；

构建工具分类：
基于任务流Gulp、
基于模块化打包webpack、
整合型FIS；

webpack支持AMD、ES Modules和CommonJS(因为webpack是基于NodeJS)，重点关注ES Modules；
ES Modules： import、export；
CommonJS： require、exports、module.exports；

webpack4
在4以前webpack是和webpack-cli集合的，但是4版本已经分离了，所以每次都需要把webpack和webpack-cli一起下载；
执行webpack时，默认入口src/index.js,默认出口dist/main.js;

自定义配置
配置出入口
命令行：webpack demo.js -o bundle.js (bundle在webpack代表被打包后的文件)
配置文件: npm init -y新建package.json;默认会找webpack.config.js；
module.exports={
  entry: '',
  output: {
    path: '',
    fileneme: ''
  },
  mode: 'development',
  module: {
    rules: [
      {
        test: /\.less$/,
        use: ['']
      }
    ]
  },
  plugins: [
    new HtmlWebpackPlugin()
  ]
}
多文件
entry: {},
output: {
  filename: '[name].js'
}

常用插件（具体使用见npmjs.com）
wenpack4默认有简单的js treeShaking，但是想要深度的treeShaking的话，需要用到webpack-deep-scope-plugin插件；
抽离单独css：mini-css-extract-plugin
css的tree shaking：purifycss-webpack，默认只会和html匹配，如果用js动态插入的元素，需要同时匹配html和js，否则会把js需要引用的样式给抖掉；
const glob=require('glob-all');
[MiniCssExtractPlugin.loader, 'css-loader']
new PurifyCSSPlugin({
  paths: glob.sync([
    path.join(__dirname, './*.html'),
    path.join(__dirname, './src/*.js')
  ])
})
因为抖动使用的是正则匹配，所以注释掉的也会匹配，所以最好把注释删掉；
处理less文件时除了下载less-loader外，还需要下载less；
使用了MiniCssExtractPlugin抽离文件时不要使用styleLoader；
同时注意css抖动代码要放在js之前，否则可能会报错！！！

postCSS一般不单独使用，常集成在构建工具中，它有两个功能：
1、把css解析成抽象语法树；
2、借助插件，如autofix，对css进行处理；
一般写在styleLoader之后，cssLoader之前：
{
  loader: 'postcss-loader',
  options: {
    ident: 'postcss', // 表明以下插件会被postcss使用
    plugins: [
      require('postcss-cssnext')(), // 当想解析css新语法时，如:root{--color: red} body{color: var(--color)}，需要使用cssnext；而且当使用cssnext时，会默认包含autoprefixer的功能，所以无需重复引入；
      // require('autoprefixer')(), // 添加前缀
      require('cssnana')() // 压缩
    ]
  }
}

html-webpack-plugin参数filename、template；
clean-webpack-plugin清空dist后再构建；

提取公共js代码（多文件入口）：
output: {
  path: path.resolve(__dirname, 'dist'),
  filename: '[name][hash:5].js',
  chunkFilename: '[name][hash:5].js'
}
optimization: {
  splitChunks: {
    cacheGroup: { // 缓存组
      common: {
        name: 'common', // 打包的chunks的名字
        chunks: 'all', // 默认async
        minSize: 1, // 形成一个新代码块最小的体积
        minChunks: 2, // 需要引用几次才能被分割
        priority: 1
      },
      vendor: {
        name: 'vendor',
        test: /[\\/]node_modules[\\/]/, // 控制哪些模块被这个缓存组匹配
        priority: 10, // 优先级比业务代码高，所以会把第三方库分离打包
        chunks: 'all'
      }
    }
  }
}

webpack中图片处理
处理图片要使用urlLoader和imgLoader(压缩图片)，fileLoader；
{
  test: /\.(jpg|jpeg|png|gif)$/,
  use: [
    {
      loader: 'url-loader',
      options: {
        name: '[name][hash:5].[ext]',
        limit: 10, // 单位字节，1000字节为1kb
        outputPath: 'img'
      }
    },
    {
      loader: 'img-loader',
      options: {
        plugins: [
          require('imagemin-pngquant')({ // 可能需要下载imagemin相关包，参数可参考github
            quality: [0.3, 0.5]
          })
        ]
      }
    }
  ]
}

当我们直接在html文件引入img时，以上图片处理不起作用，此时需要借用html-loader：
{
  test: /\.html$/,
  use: [
    {
      loader: 'html-loader',
      options: {
        attrs: ['img:src']
      }
    }
  ]
}

开启本地服务器
需要在全局和开发依赖安装webpack-dev-server;
devServer: {
  port: '9090',
  contentBase: 'dist'
}
webpack-dev-server --open --color
webpack-dev-server默认刷新整个页面，当想局部刷新时需要使用webpack的内置插件new Webpack.HotModuleReplacementPlugin()，但是它只对使用了styleLoader的css起作用，要想使js起作用，需要在入口js文件加上:
if(module.hot){
  module.hot.accept();
}

webpack4默认支持通过require引入json文件获取数据；

区分环境打包
webpack --config webpack-dev.config.js
webpack --config webpack-prod.config.js
webpack-dev-server --config webpack-dev.config.js
