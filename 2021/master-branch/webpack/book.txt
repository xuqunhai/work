为什么选择Webpack？
--为项目提供一站式解决方案；
--良好生态链和维护团队；
--更多教程和经验分享；

npm init ———— 初始化最简单的采用了模块化开发的项目；

安装webpack
安装指定版本 —— npm i -D webpack@<version>
安装最新体验版本 —— npm i -D webpack@beta

运行本地webpack
1、node_modules/.bin/webpack运行；
2、package.json的npm script定义的任务会优先使用本项目下的webpack；
推荐安装到本项目，可防止不同项目因依赖不同版本的webpack而导致冲突；

Loader：
具有文件转化功能；
配置事项：
use属性是loader名称组成数组，执行顺序是由后到前；
每个loader可通过url querystring方式传入参数；
还可以通过Object传属性；
use: ['css-loader?minimize']
use: [{
  loader: 'css-loader',
  options: {
    minimize: true
  }
}]
还可以在源码中指定用什么loader去处理文件：
require('style-loader!css-loader?minimize!./main.css);
对main.css先用css-loader再用style-loader;

Plugin:
通过注入钩子扩展webpack功能；
plugins属性数组是一个插件实例列表；

webpack-dev-server会启动http服务器用于网络请求，同时会启动监听模式的webpack并接受webpack发出的文件变更信号，
此时devServer会让webpack在构建出的js代码里注入代理客户端用于控制网页，网页和devServer之间通过websocket协议通信，以方便deServer主动向客户端发送命令；
只有entry本身和依赖的文件才会被webpack添加到监听列表里；

模块热替换（不重新加载整个网页）只需在启动devServer时带上--hot参数；
调试只需在启动时带上--devtool source-map即可；

Entry - 递归解析依赖 - Loader转换 - 一个Entry及其依赖就是一个Chunk - 将Chunk转成输出；中间恰当时间执行Plugin定义的逻辑；

配置webpack：
1、webpack.config.js;
2、命令行参数传入： webpack --devtool source-map;
3、混合： webpack --config webpack-dev.config.js;

entry:必填，否则会报错并退出；
--可以是string、array和object一种或组合，
--object可以配置多入口，每个入口生成Chunk；Chunk名称时object的键名；
--array搭配output.library时只有最后一个入口文件的模块会被导出；Chunk名称是main；
配置动态Entry：
entry: ()=>{
  return {
    a: './pages/a',
    b: './pages/b',
  }
}
entry: ()=>{
  return new Promise((resolve)=>{
    resolve({
      a: './pages/a',
      b: './pages/b',
    })
  })
}

module.exports={
  context: path.resolve(__dirname,'app');
};
寻找相对路径的文件时会以以context为根目录，默认为webpack启动时目录；必须是一个绝对路径；

output如何输出代码，是一个object；
--filename：
----只有一个输出文件时，可以写出静态不变的；
----有多个Chunk时需要借助模版和变量，如'[name].js',变量可取name,id,hash,chunkhash,如'[hash:8].js';
----使用ExtractTextWebpackPlugin插件时要用contenthash而不是chunkhash，因为提取出来的是代码本身内容，而不是一组模块组成的Chunk；
--chunkFilename：
----无入口的Chunk在输出时的文件名称，如使用CommonChunkPlugin、使用import动态加载等；
--path：输出文件存放的目录，string类型绝对路径，如path.resolve(__dirname, 'dist_[hash]');
--publicPath: 打包后的代码放置在服务器的哪个目录下；
----如构建后的a.js需要上传到cdn上，然后通过http://www.baidu.com/assets/a.js可访问，
----那么需要配置：{filename: '[name].js', publicPath: 'http://www.baidu.com/assets/'}
--crossOriginLoading:异步加载是通过jsonp实现的，即动态插入script标签去加载异步资源，而请求时带不带上用户Cookie是有这个参数控制；use-credentials带、anonymous默认不带；
--构建一个可被其他模块导出的库时，需要用到libraryTarget和library；如果还想实现只导出部分子模块的话，除了libraryTarget必须为commonjs或commonjs2外，还需要配合libraryExport；

Module
配置loader：
--test、include、exclude；可传字符串或正则或数组；
--use应用loader，从后往前顺序；
----use: ['a-loader','b-loader?x=1']
----当需要给loader传很多参数时，可用对象use: [{loader: 'c-loader',options: {cacheDirectory: true, xxx: 1, yyy: 2},enforce: 'post'}]
--通过enforce选项重置顺序；
配置noParse：/jquery|chartjs/;对没有采用模块化标准的库不进行递归解析和处理，提高构建性能；只能控制哪些文件不被解析；
配置parser：精确到语法层面配置哪些模块语法被解析、哪些不被解析；

Resolve
--alias:路径别名映射；
--mainFields:当某库提供了不同环境的不同代码时，webpack会根据mainFields去决定优先采用哪份代码；
--extensions:导入语句没后缀时自动带上后缀访问；
--modules：去哪些目录寻找第三方模块，如import 'button'默认只会去node_modules找，
----配置modules: ['./src/component','node_modules']即会去src找，不用写相对路径了；
--descriptionFiles：描述文件，默认['package.json']
--enforceExtension:导入语句是否必须带后缀；设为true会默认把node_modules下模块也要求了，所以经常配合下面enforceModuleExtension来兼容第三方模块；
--enforceModuleExtension：只对node_modules下模块有效，导入语句是否必须带后缀；

Plugin
接受数组，每一项都是Plugin实例，参数通过构造函数传入：new Fun(options);

DevServer
--hot:局部刷新实现实时预览；
--inline：