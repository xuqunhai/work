process进程
global全局对象

执行node代码时调试（brk就是break，可以让node在最前面停下来给我们打debugger）
node --inspect-brk 1.js

包裹
(function(exports,require,module,__filename,__dirname){})
module变量代表本身，module.exports表示对外接口
这个决定了每个文件都是模块，都有自己的作用域；

js、json、node扩展名可省略；
不写路径会从当前目录查找，往外找node_modules的第三方模块；

require特性：
1、第一次加载时就会执行，然后会被保存，下次会从缓存获取：
所以连续两次requre同一个文件时，代码只会执行一次；


fs,readFile获取到的data需要toString();

const {argv, execArgv} = process;
argv -> 命令行参数获取
execArgv -> 命令行特殊参数获取,如--inspect;

process.env.PATH;
process.pwd();
process.nextTick(()=>{ // 当前队列末尾，使用不当会阻塞下一个队列的执行
  console.log('nextTick');
})
setImmediate(() => { // 下一个队列的头部
  console.log('setImmediate');
})


Buffer
是node全局变量，无需require；类数组；物理内存；
Buffer.alloc(10); // 创建长度为10的Buffer，默认用00填充
Buffer.alloc(10, 1); // 创建长度为10，且用01填充的Buffer
Buffer.allocUnsafe(10, 1); // 创建长度为10，且用随机数填充的Buffer

// 指定值进行Buffer转换
const buf1=Buffer.from([1,2,3])
const buf2=Buffer.from('test')

Buffer.byteLength('test') // 4
Buffer.byteLength('测试') // 6

Buffer.isBuffer('test') // false
Buffer.isBuffer(Buffer.from('test')) // true

Buffer.concat([buf1,buf2])

buf.length的长度如果是通过Buffer.alloc和Buffer.allocUnsafe事先申请好的话，就固定返回申请好的长度：
const buf2=Buffer.allocUnsafe(10);
buf2[0]=2;
buf2.length; //10

buf2.toString(); //默认utf8，可传入base64字符串:buf2.toString('base64');

buf2.fill(10,2,6); // 从下标2开始到下标6，填充10，这里10会转成十六进制0a；

判断两个buf内容是否一样buf.equals(buf2);

buf也有indexOf和lastIndeOf方法；

const StringDecoder=require('string_decoder').StringDecoder;
const decoder=new StringDecoder('utf8');
for(let i=0;i<buf.length;i+=5){
  const b=Buffer.allocUnsafe(5);
  buf.copy(b,0,i);
  console.log(b.toString()); // 会乱码，因为每个中文占3个字节，而每个buf有5个，后面剩2个字节显示中文不够所以乱码
}
for(let i=0;i<buf.length;i+=5){
  const b=Buffer.allocUnsafe(5);
  buf.copy(b,0,i);
  console.log(decoder.write(b)); // 不会乱码，因为不足的会缓存起来，会和下一次进行拼接；
}


events事件
net.Server每次新链接时触发事件，
fs.ReadStream文件被打开时触发事件，
流对象会在数据可读时触发事件，
以上对象都是EventEmitter类实例；
class CustomEvent extends EventEmitter {}
const ce = new CustomEvent();
ce.on('test',fn1);
ce.on('test',fn2);
ce.removeListener('test',fn2);
// ce.removeAllListeners('test');



fs文件系统
使用同步方法时，任何异常都会立即抛出，可使用try/catch处理；


默认读取文件是Buffer数据，需要使用toString方法转成字符串，或者直接调用readFile方法时传入utf8:
fs.readFile('./1.js', 'utf8', (err,data) => {})
写入文件也是，当写入数据为buffer时，无需传编码格式，即可写入字符串，否则需要指定编码：
const content = Buffer.from('This is buffer');
fs.writeFile('./3.js', content, callback);
或
fs.writeFile('./2.js', 'This is string', 'utf8', callback);


判断文件存不存在或者是文件还是文件夹时，使用fs的stat方法:
fs.stat('./haha.js', (err, stats) => {
  if(err){
    console.log('文件不存在');
    return;
  }
  console.log(stats.isFile())
  console.log(stats.isDirectory())
  console.log(stats)
})

文件重命名fs.rename(a,b,cb);
删除fs.unlink(path, callback);
查看目录fs.readdir('./', (err, files)=>{})
创建目录fs.mkdir('test',cb);
创建目录fs.rmdir('./test',cb);
监视
fs.watch('./', {
  recursive: true // 递归
}, (eventType, filename) => {})


有用配置文件.npmignore（常包括src目录和test目录）、editorconfig.org(需要安装editorconfig插件);


http.createServer()内部相当于用了http.Server实例，并监听request事件；