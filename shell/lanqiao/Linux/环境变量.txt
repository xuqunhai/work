------------------------ 环境变量与文件查找 --------------------------

所谓变量就是计算机中用于记录一个值（不一定是数值，也可以是字符或字符串）的符号，
而这些符号将用于不同的运算处理中。
通常变量与值是一对一的关系，可以通过表达式读取它的值并赋值给其它变量，也可以直接指定数值赋值给任意变量。

变量名只能是英文字母、数字或者下划线，且不能以数字作为开头。

使用 declare 命令创建一个变量名为 tmp 的变量：

declare tmp

使用 = 号赋值运算符，将变量 tmp 赋值为 shiyanlou。注意，与其他语言不同的是， Shell 中的赋值操作，= 两边不可以输入空格，否则会报错。

# 正确的赋值
tmp=shiyanlou

# 错误的赋值
tmp = shiyanlou


读取变量的值，使用 echo 命令和 $ 符号（$ 符号用于表示引用一个变量的值，初学者经常忘记输入）：

echo $tmp



-------------------------- 环境变量 ------------------------

为了与普通变量区分，通常我们习惯将环境变量名设为大写。

通常我们会涉及到的变量类型有三种：

当前 Shell 进程私有用户自定义变量，如上面我们创建的 tmp 变量，只在当前 Shell 中有效。
Shell 本身内建的变量。
从自定义变量导出的环境变量。
也有三个与上述三种环境变量相关的命令：set，env，export。

命 令	说 明
set	显示当前 Shell 所有变量，包括其内建环境变量（与 Shell 外观等相关），用户自定义变量及导出的环境变量。
env	显示与当前用户相关的环境变量，还可以让命令在指定环境中运行。
export	显示从 Shell 中导出成环境变量的变量，也能通过它将自定义变量导出为环境变量。



--------------------------------------------------

示例：用 export 命令来体会一下，先在 Shell 中设置一个变量 tmp=1，然后再新创建一个子 Shell 查看 tmp 变量的值

默认bash中创建变量：
tmp=1
echo $tmp // 1
创建子shell，从默认bash切换到zsh
zsh
echo $tmp // 值为空
exit // 退出
export tmp
zsh
echo $tmp // 1,变量有效



------------------------ 怎么才能让环境变量永久生效呢？ --------------------------

按变量的生存周期来划分，Linux 变量可分为两类：
永久的：需要修改配置文件，变量永久生效；
临时的：使用 export 命令行声明即可，变量在关闭 shell 时失效。


介绍两个重要文件 /etc/bashrc（有的 Linux 没有这个文件） 和 /etc/profile ，
它们分别存放的是 shell 变量和环境变量。
还有要注意区别的是每个用户目录下的一个隐藏文件：

# .profile 可以用 ls -a 查看
cd /home/shiyanlou
ls -a


这个 .profile 只对当前用户永久生效。
因为它保存在当前用户的 Home 目录下，当切换用户时，工作目录可能一并被切换到对应的目录中，这个文件就无法生效。
而写在 /etc/profile 里面的是对所有用户永久生效，
所以如果想要添加一个永久生效的环境变量，只需要打开 /etc/profile，在最后加上你想添加的环境变量就好啦。



------------------------- Shell 是怎么知道去哪找到这个命令然后执行的呢？ -------------------------


这是通过环境变量 PATH 来进行搜索的，熟悉 Windows 的用户可能知道 Windows 中的也是有这么一个 PATH 环境变量。这个 PATH 里面就保存了 Shell 中执行的命令的搜索路径。

查看 PATH 环境变量的内容：
echo $PATH



------------------------- 添加自定义路径到“ PATH ”环境变量 -------------------------


在前面我们应该注意到 PATH 里面的路径是以 : 作为分割符的，所以我们可以这样添加自定义路径：
PATH=$PATH:/home/shiyanlou/mybin

注意这里一定要使用绝对路径。
现在你就可以在任意目录执行那两个命令了（注意需要去掉前面的 ./）


给 PATH 环境变量追加了一个路径，它也只是在当前 Shell 有效，我一旦退出终端，再打开就会发现又失效了。
有没有方法让添加的环境变量全局有效？或者每次启动 Shell 时自动执行上面添加自定义路径到 PATH 的命令？

------------------------- 每次启动 Shell 时自动执行上面添加自定义路径到 PATH 的命令？ -------------------------


在每个用户的 home 目录中有一个 Shell 每次启动时会默认执行一个配置脚本，以初始化环境，包括添加一些用户自定义环境变量等等。
它们在 etc 下还都有一个或多个全局的配置文件，
不过我们一般只修改用户目录下的配置文件。

Shell 的种类有很多，可以使用 cat /etc/shells 命令查看当前系统已安装的 Shell。

cd /home/shiyanlou
ls -a
echo "PATH=$PATH:/home/shiyanlou/mybin" >> .zshrc

实验楼的环境使用的 Shell 是 zsh，它的配置文件是 .zshrc，
相应的如果使用的 Shell 是 Bash，则配置文件为 .bashrc。

上述命令中 >> 表示将标准输出以追加的方式重定向到一个文件中，注意前面用到的 > 是以覆盖的方式重定向到一个文件中，使用的时候一定要注意分辨。
在指定文件不存在的情况下都会创建新的文件。



------------------------ 修改和删除已有变量 --------------------------


变量设置方式	说明
${变量名#匹配字串}	从头向后开始匹配，删除符合匹配字串的最短数据
${变量名##匹配字串}	从头向后开始匹配，删除符合匹配字串的最长数据
${变量名%匹配字串}	从尾向前开始匹配，删除符合匹配字串的最短数据
${变量名%%匹配字串}	从尾向前开始匹配，删除符合匹配字串的最长数据
${变量名/旧的字串/新的字串}	将符合旧字串的第一个字串替换为新的字串
${变量名//旧的字串/新的字串}	将符合旧字串的全部字串替换为新的字串


修改示例：
echo $mypath // /home/a/b:/home/a/c:/home/a/d
mypath=${mypath%/home/a/d} // 从后往前匹配，删除最后一个
echo $mypath // /home/a/b:/home/a/c:
mypath=${mypath#/home/a/b} // 从前往后匹配，删除匹配第一个
echo $mypath // :/home/a/c:


变量删除
可以使用 unset 命令删除一个环境变量：
unset mypath



-------------------------- 如何让环境变量立即生效 ------------------------


在 Shell 中修改了一个配置脚本文件之后（比如 zsh 的配置文件 home 目录下的 .zshrc），每次都要退出终端重新打开甚至重启主机之后其才能生效，很是麻烦，
我们可以使用 source 命令来让其立即生效，如：

cd /home/shiyanlou
source .zshrc

source 命令还有一个别名就是 .，上面的命令如果替换成 . 的方式就该是：
. ./.zshrc
注意第一个点后面有一个空格，而且后面的文件必须指定完整的绝对或相对路径名，source 则不需要。
