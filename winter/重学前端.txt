初衷：
提供一些视角，以完备、体系化的方式理解和思考前端的基础知识和工程实践；
帮助你建立自己的知识体系，把前端领域知识链接起来，形成结构；
学习方法+知识架构+核心思想；

前端工程师的成长：
1、立足标准，系统性总结和整理前端知识，建立自己的认知和方法论；
2、放眼团队，从业务和工程角度思考前端团队的价值和发展需要；

前端工程师=前端领域知识+工程特点+编程能力+架构能力；

前端基础知识=JS+CSS+HTML+浏览器实践；
前端团队发展=前端综合应用；

JS从文法和运行时角度去看，语义是两者之间桥梁；
CSS和HTML从语言和设计思想角度；
浏览器部分包括浏览器工作原理和重要API；


学习路径和方法：
《JavaScript高级程序设计》《精通CSS》

追本溯源法：
关注技术提出的背景，关注原始论文或文章，关注作者说的话（wiki）；

建立知识架构：
知识的目录或索引，组织零散知识，发现盲区；
逻辑性和完备性；

给JS知识做一个顶层目录，
用规定的文法，去表达特定语义，最终操作运行时；

文法=词法+语法
语义
运行时=类型+执行过程（程序=算法+数据结构）

重点讲解：
从技术背景、原理和设计出发，适用于有体系和源流的知识，比较适合系统学习和理解，比如js对象、css排版；
知识图谱：
用表格和脑图整理知识结构，适用于零散知识，比较适合记住大概，用到时去查阅，如JS词法、HTML标签和浏览器API；



图灵完备性=命令式+声明式
类型系统：（ts只是在具备2和3的js基础上，加了1）
1、动态类型系统和静态类型系统
2、弱类型和强类型
3、复合类型（函数签名和结构体）
4、逆变和斜变（c++才有）


命令式编程语言：
Program - Program - js
Structure - Function - function
Statement - Keyword - if
Expression - Operator - >
Atom - Identifier - a 1

function test(a){
    if (a > 1) {}
}
