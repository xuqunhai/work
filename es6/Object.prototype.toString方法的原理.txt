在toString方法被调用时,会执行下面的操作步骤:
1. 获取this对象的[[Class]]属性的值.
2. 计算出三个字符串"[object ", 第一步的操作结果Result(1), 以及 "]"连接后的新字符串.
3. 返回第二步的操作结果Result(2).

[[Class]]	一个字符串值,表明了该对象的类型.
原生对象的[[class]]内部属性的值一共有10种.分别是:"Array", "Boolean", "Date", "Error", "Function", "Math", "Number", "Object", "RegExp", "String".

null和undefined使用toString()方法都会报错，因为它们是原始值，而且没有对应的包装类对象，不像数字或字符串这些会自动转成包装类然后通过继承去查找；


总结：
只重写了toString，对象转换时会无视valueOf的存在来进行转换；
只重写了valueOf方法，在要转换为字符串的时候会优先考虑Object.toString方法，在不能调用toString的情况下，只能让valueOf上阵了。
出现字符串拼接问题，因为拼接需要用到操作符’+’,而在有操作符的情况下，valueOf的优先级本来就比toString的高。




